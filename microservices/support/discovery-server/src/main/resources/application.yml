server:
  port: 8761
security:
  user:
    password: ${eureka.password} # Don't use a default password in a real app

eureka:
  client:
    registerWithEureka: false
    fetchRegistry: false
  server:
    waitTimeInMsWhenSyncEmpty: 0
  password: ${SECURITY_USER_PASSWORD:password}

---
spring:
  profiles: peer # not standalone
eureka:
  instance:
    hostname: 127.0.1.1
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://user:${eureka.password}@127.0.0.1:8762/eureka/

---
# Eureka instance 1 when used on Docker
spring:
  profiles: docker1
eureka:
  instance:
    hostname: discovery
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://user:${eureka.password}@discovery2:8762/eureka/

---
# Eureka instance 2 when used on Docker
spring:
  profiles: docker2
server:
  port: 8762
eureka:
  instance:
    hostname: discovery2
    nonSecurePort: ${server.port}
  client:
    serviceUrl:
      defaultZone: http://user:${eureka.password}@discovery:8761/eureka/

---
spring:
  profiles: other # not standalone
server:
  port: 8762
eureka:
  instance:
    hostname: 127.0.0.1
    nonSecurePort: ${server.port}
  client:
    serviceUrl:
      defaultZone: http://user:${eureka.password}@127.0.1.1:8761/eureka/

---
spring:
  profiles: local # connect to remote peer
eureka:
  instance:
    hostname: ${localhost.hostname:${localhost.ngrok}.ngrok.com}
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://user:${eureka.password}@${PREFIX:}eureka.cfapps.io/eureka/

  